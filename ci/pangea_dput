#!/usr/bin/env ruby
# frozen_string_literal: true
#
# Copyright (C) 2015-2017 Harald Sitter <sitter@kde.org>
# Copyright (C) 2015-2016 Rohan Garg <rohan@garg.io>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) version 3, or any
# later version accepted by the membership of KDE e.V. (or its
# successor approved by the membership of KDE e.V.), which shall
# act as a proxy defined in Section 6 of version 3 of the license.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library.  If not, see <http://www.gnu.org/licenses/>.

require 'aptly'
require 'optparse'
require 'ostruct'
require 'uri'

require_relative '../lib/ci/deb822_lister'
require_relative '../lib/aptly-ext/remote'

STDOUT.sync = true # Make sure output is synced and bypass caching.

options = OpenStruct.new
options.host = nil
options.port = nil
options.repos = []
options.gateway = nil

parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{opts.program_name} [options] --repo yolo CHANGESFILE"

  opts.on('-h', '--host HOST', '[deprecated] use a --gateway uri') do |v|
    options.host = v
  end

  opts.on('-p', '--port PORT', '[deprecated] use a --gateway uri') do |v|
    options.port = v
  end

  opts.on('-r', '--repo REPO', 'target repo name') do |v|
    options.repos << v
  end

  opts.on('-g', '--gateway URI', 'open gateway to remote') do |v|
    options.gateway = URI(v)
  end
end
parser.parse!

raise parser.help if ARGV.empty? || options.repos.empty?

unless options.gateway
  warn <<-EOF
You really need to specify a gateway! That is the aptly host but is
stupidly named.
A gateway can be http://localhost:9090 for no gateway or ssh://user@host:port for
SSH port gateway or ssh://user@host:port/tmp/foo for a socket gateway.
  EOF
end

raise 'Cannot use both --host and --gateway' if options.host && options.gateway

# Compat handling:
# We use Aptly::Ext::Remote to configure aptly, this does however require a URI
# against which it can pick a connector. So we need a gateway even when we have
# no gateway need, in that case it is simply the specifier of the aptly host
# via http.
# Why this compat wasn't introduced when the gatway logic was introduced is
# beyond me.
if options.host && options.port
  options.gateway = URI::HTTP.build(host: options.host, port: options.port.to_i)
  warn 'Running in compat mode as both host and port were specified.'
end

if !options.host && options.port && options.gateway && !options.gateway.port
  options.gateway.port = options.port
  warn 'Running in compat mode and injecting your --port into the gateway!'
end

if !options.host && options.port && !options.gateway
  options.gateway = URI::HTTP.build(host: 'localhost', port: options.port)
  warn 'Running in compat mode using localhost:$port.'
end

# Set the timeout to 15 minutes to allow upload of large packages such as
# firefox and publishing of excessively large repositories.
Faraday.default_connection_options =
  Faraday::ConnectionOptions.new(request: {timeout: 15 * 60})

Aptly::Ext::Remote.connect(options.gateway) do
  repos = options.repos.collect { |name| Aptly::Repository.get(name) }

  ARGV.each do |file|
    next unless File.size?(file)

    puts "translating uploads #{file}"
    files = CI::Deb822Lister.files_to_upload_for(file)
    raise 'Changes lists no files to upload!?' if files.empty?

    puts "Uploading files... #{files}"
    Aptly::Files.tmp_upload(files) do |dir|
      repos.each { |r| r.add_file(dir, noRemove: 1) }
    end
    puts 'Done uploading.'
  end

  repos.each do |r|
    puts "Republishing #{r}"
    r.published_in.each(&:update!)
    puts 'Done.'
  end
end
