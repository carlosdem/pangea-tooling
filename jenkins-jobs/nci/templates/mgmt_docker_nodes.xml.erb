<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1436.vfa_244484591f">
  <actions/>
  <description>runs the docker cleanup routine and produces new docker image(s) on the persistent and currently running ephemeral nodes/builders</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@166.vc82fc20b_a_ed6">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>

    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <jenkins.triggers.ReverseBuildTrigger>
          <spec/>
          <upstreamProjects>mgmt_tooling_nodes</upstreamProjects>
          <threshold>
            <name>UNSTABLE</name>
            <ordinal>1</ordinal>
            <color>YELLOW</color>
            <completeBuild>true</completeBuild>
          </threshold>
        </jenkins.triggers.ReverseBuildTrigger>
        <hudson.triggers.TimerTrigger>
          <spec>H 9-16/6 * * *</spec>
        </hudson.triggers.TimerTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3922.va_f73b_7c4246b_">
    <script>fancyNode('master') {
  stage('init')
}
  stage('docker_deploy') {
    def nodes = nodesForDeployment()
  echo "Going to deploy on '${nodes}'\n"

  def deployments = [:]
  nodes.each {
        name -&gt; deployments[name] = {
            cleanNode(name) {
              sh '''#!/bin/bash

              # Only build ubuntu images. Neon needs no debian images.
              export PANGEA_UBUNTU_ONLY=1

              ~/tooling/mgmt/docker_cleanup.rb
              ~/tooling/mgmt/docker.rb
              '''
        }
      }
    }
  parallel deployments
 }

// @return list of node names for deployment to
// @warning this needs Groovy Sandbox turned off!
def nodesForDeployment() {
  def labels = ['amd64', 'arm64', 'aarch64']
  // Collect nodes for which *any* label is contained in the label list.
  nodes = jenkins.model.Jenkins.instance.nodes.collect {
        node -&gt; (node.toComputer() != null &amp;&amp; node.toComputer().online
        &amp;&amp; node.assignedLabels.any { element -&gt; labels.contains(element.name) }
        &amp;&amp; node.assignedLabels.every { element -&gt; element.name != 'shared-node' }
             ? node.name
             : null)
             }
  nodes = nodes - null

  if (nodes.isEmpty()) {
    error("nodesForDeplgemoyment found no nodes!") // Opinionated requirement for xenon!
  }
  return nodes
}

def withCleanup(body) {
  try {
    body()
  } finally {
    /*cleanWs()*/
  }
}

def withFancyWrap(body) {
  wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']) {
    wrap([$class: 'TimestamperBuildWrapper']) {
      body()
    }
  }
}

def fancyNode(label = null, body) {
  node(label) {
    withFancyWrap {
      body()
    }
  }
}

def cleanNode(label = null, body) {
  node(label) {
    deleteDir()
    withCleanup {
      withFancyWrap {
        body()
      }
    }
  }
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
